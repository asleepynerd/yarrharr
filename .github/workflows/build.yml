name: Build YarrHarr

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_call:
    inputs:
      upload_url:
        required: false
        type: string

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # MacOS builds
          - os: macos
            arch: arm64
            runner: macos-latest
            cmake_arch: "-DCMAKE_OSX_ARCHITECTURES=arm64"
          - os: macos
            arch: x86_64
            runner: macos-latest
            cmake_arch: "-DCMAKE_OSX_ARCHITECTURES=x86_64"
          
          # Linux builds
          - os: linux
            arch: x86_64
            runner: ubuntu-latest
            cmake_arch: ""

    steps:
    - uses: actions/checkout@v3

    - name: Install Linux ARM64 toolchain
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        sudo apt-get install -y crossbuild-essential-arm64
        sudo apt-get install -y libcurl4-openssl-dev:arm64
        sudo apt-get install -y nlohmann-json3-dev:arm64

    - name: Install dependencies (Linux x86_64)
      if: matrix.os == 'linux' && matrix.arch == 'x86_64'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev nlohmann-json3-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos'
      run: |
        brew install curl nlohmann-json

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows'
      run: |
        vcpkg install curl:${{ matrix.arch }}-windows
        vcpkg install nlohmann-json:${{ matrix.arch }}-windows
        vcpkg integrate install

    - name: Configure CMake
      run: |
        cmake -B build ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Create package
      run: |
        cd build
        mkdir yarrharr-${{ matrix.os }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" = "windows" ]; then
          cp Release/yarrharr.exe yarrharr-${{ matrix.os }}-${{ matrix.arch }}/
        else
          cp yarrharr yarrharr-${{ matrix.os }}-${{ matrix.arch }}/
        fi
        zip -r yarrharr-${{ matrix.os }}-${{ matrix.arch }}.zip yarrharr-${{ matrix.os }}-${{ matrix.arch }}
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: yarrharr-${{ matrix.os }}-${{ matrix.arch }}
        path: build/yarrharr-${{ matrix.os }}-${{ matrix.arch }}.zip

    - name: Upload Release Assets
      if: inputs.upload_url != ''
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ inputs.upload_url }}
        asset_path: build/yarrharr-${{ matrix.os }}-${{ matrix.arch }}.zip
        asset_name: yarrharr-${{ matrix.os }}-${{ matrix.arch }}.zip
        asset_content_type: application/zip 